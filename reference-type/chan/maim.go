package main

import "fmt"

func main() {
	/*
	* chan
	 */
	// チャネルはゴルーチンとゴルーチンの間でデータの受け渡しを司るためにデザインされたGo特有のデータ構造

	/*
	* チャネルの型
	 */
	// チャネルの型名はchanと型定義の間にスペースが含まれる
	var ch chan int        // int型のチャネルを表す
	fmt.Printf("%T\n", ch) // chan int

	// チャネルにはGoの他のデータ型には存在しない特殊なサブタイプを指定できる
	// 「<-chan」は受信専用チャネルで「chan<-」は送信専用チャネル
	// オプションを指定しない場合は受診も送信も可能な双方向のチャネルとして機能する
	var ch1 <-chan int      // 受信専用
	var ch2 chan<- int      // 送信専用
	fmt.Printf("%T\n", ch1) // <-chan int
	fmt.Printf("%T\n", ch2) // chan<- int

	// Goのデータ型は厳密で異なる型の変数同士の代入は原則的にコンパイルエラーとなるがチャネルのサブタイプについては少し異なる
	// サブタイプの指定がないchanはサブタイプ付きのchanに代入可能だが、それ以外のサブタイプを越えて代入はできない
	// 基本はサブタイプ指定がないchanで局面に応じて受信専用or送信専用に切り替えることを意図した仕組みである
	ch1 = ch
	ch2 = ch
	// ch = ch1 ←NG
	// ch = ch2 ←NG
	// ch1 = ch2 ←NG
	// ch2 = ch1 ←NG

}
