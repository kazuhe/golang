package main

import (
	"fmt"
)

func main() {
	/*
	*  ポインタ
	 */
	// ポインタとは「値型（value type）」に分類されるデータ構造（基本型や参照型や構造体など）のメモリ上のアドレスと型の情報
	// Goではポインタを使ってデータ構造を間接的に参照・操作できる
	// （Goのポインタを"複雑に"使わずとも大きな支障はきたさない、存在意義は"Cとの互換性の為"との意見も）

	/*
	*  ポインタの定義
	 */
	// ポインタ型は「*int」の様にポインタを使って参照・操作す型の前に「*」を置くことで定義できる
	// また、定義のみを行ったポインタ型の変数の初期値はnilになり、参照型を同じ様に振舞う。
	var p *int
	fmt.Println(p == nil) // true

	// ↓の様にint型のポインタのポインタを参照・操作する為のポインタ型も定義できるが、Goではこの様な複雑な定義が必要になることは無い
	// var p ***int

	// 参照型にもポインタ型を定義できるが、参照型自身が型の仕組みにポインタを使った参照を含んでいる
	// 参照型へのポインタが必要になるケースは相当なレアケースに限られる
	var (
		s  *[]string
		m  *map[int]rune
		ch *chan int
	)
	fmt.Println(s, m, ch)
}
